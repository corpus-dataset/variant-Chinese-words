//记录变体字在读取字符串中的相对位置，与输入词字的相对位置匹配
// 复杂度O(n)+O(m), n: text num, m: characters num

function matchM(originInput, formatData) {
 	var re = new RegExp(originInput, "g");
	function schunk(value,text, arr){
		for (var i = text.length - 1; i >= 0; i--) {
			if(text[i] == value){
				arr.push(i);
			}
		};
	};
	function inArr(arr, value){
		for (var i = arr.length - 1; i >= 0; i--) {
			if(arr[i] == value){
				return true;
			}
		}
		return false;
	};
	return function(chunk){
		var index = chunk.search(re);
		var singleIndexs = {};
		var originOrder = [];
		var originKey = [];
		var i = 0;
		var key = null
		if(index > 0){
			return index
		};
		for (i = 0; i < originInput.length; i++) {
			for(key in formatData){
				if(originInput[i] == key){
					originOrder.push(i);
					originKey.push(key);
				}
			}
		}
		for(key in formatData){
			singleIndexs[key]=[];
			var content = formatData[key];
			if (content.chaifen) {
				schunk(content.chaifen, chunk, singleIndexs[key]);
			}
			for(var name in content){
				if(name == "chaifen" || !content[name]){
					continue;
				}
				var hanzi = content[name];
				for (i = hanzi.length - 1; i >= 0; i--) {
					schunk(hanzi[i], chunk, singleIndexs[key]);
				};
			}
		}
		originOrder.sort();
		var arr = singleIndexs[originKey[0]];
		for (i = arr.length - 1; i >= 0; i--) {
			var last = arr[i];
			if(originKey.length == 1){
				index = last;
			}
			for (var j = 1; j < originKey.length; j++) {
				var iNum = originOrder[j] + last - originOrder[0];
				if(iNum < 0){
					break;
				}
				var iArr = singleIndexs[originKey[j]];
				if(!inArr(iArr,iNum)){
					break;
				}
				if(j == originKey.length -1){
					index = last;
				}
			};
		};
		console.log('order input', originOrder);
		console.log("index",singleIndexs);
		return index;
	}
}
exports.matchM = matchM;