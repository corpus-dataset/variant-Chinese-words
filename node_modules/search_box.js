//search key word
var events = require('events');
var util = require('util');
var sqliteTemplate = require('sqlite_template');

function SearchBox(jquery_element){
	events.EventEmitter.call(this);
	this.element = jquery_element;
	this.hanziOrigin = [];
	this.hanziArray = [];
	this.hanziNameById = new Object();
	this.variant = {"xingjin":{}, "tongyin":{}, "chaifen":{}};
	this.searchCheckbox = {};
	this.dataStatus = {"xingjin":{}, "tongyin":{}, "chaifen":{}};;
  	var self = this;
  	
	this.element.on('click', function() {
		self.dataStatus = {"xingjin": false, "tongyin": false, "chaifen":false};
		self.variant = {"xingjin":{}, "tongyin":{}, "chaifen":{}};
		$("input[name = 'checkbox']").each(function(){
	  		var id = $(this).attr("id")
	  		self.searchCheckbox[id] = $(this).prop('checked');
		});
		console.log("search checkbox", self.searchCheckbox);
		var words = $("input[name = 'ChineseWords']").val();
		self.hanziOrigin = words;
		// console.log("get input:" + words);
		var res = {"status": false, "msg": ""};
		var re = new RegExp("[\u4e00-\u9fa5]", "g");
		var filterWords = words.match(re);
		// console.log(filterWords);
		if(words.length <= 0){
			res.msg = "blank";
		}else if(words.length > 6){
			res.msg = "more";
		}else{
			res.status = true;
			res.msg = "extract";
			self.hanziArray = unique(filterWords);
		}
		self.emit('navigate', res);
  	});
}
util.inherits(SearchBox, events.EventEmitter);
SearchBox.prototype.extract = function() {
	if(this.hanziArray === null){
		return false;
	}
	var that = this;
	var sqlite = sqliteTemplate.langTemplate('hanzi.db');
	var hanziArray = this.hanziArray;
	var checkbox = that.searchCheckbox;
	var idCondition = {
		"table": "hanzi_list",
		"fields": ["id","name"],
		"conditions": {
			"name": hanziArray, 
		}
	}; 
	sqlite.linkDb();
	sqlite.findAll(idCondition, function(err, row){
		console.log("all origin id name",row);
		var hanziIds = new Array();
		var hanziObj = new Object();
		for (var i in row) {
			hanziObj[row[i].name] = row[i].id;
			hanziIds.push(row[i].id);
		};
		that.hanziNameById = hanziObj;
		console.log("search ids",hanziIds);
		console.log("hanziNameById",hanziObj);
		if(checkbox["xingjinCheckbox"]){
			findXingjin(sqlite, hanziIds, that.variant["xingjin"], that);
		}else{
			that.dataStatus['xingjin'] = true;
			that.variant["xingjin"]=null;
		}
		if(checkbox["tongyinCheckbox"]){
			findTongyin(sqlite, hanziIds, that.variant["tongyin"], that);
		}else{
			that.dataStatus['tongyin'] = true;
			that.variant["tongyin"] = null;
		}
		if(checkbox["chaifenCheckbox"]){
			findChaifen(sqlite, hanziIds, that.variant["chaifen"], that);
		}else{
			that.dataStatus['chaifen'] = true;
			that.variant["chaifen"] = null;
		}
		that.emit('dataStatus', that.dataStatus);
		console.log("variant", that.variant);
	});
	sqlite.closeDb();
}
SearchBox.prototype.formatDate = function(){
	var that = this;
	var hanziName = that.hanziNameById;
	var variant = that.variant;
	var res = new Object();
	var tongyinzi = [];
	var hanziIds = [];
	for(var i in hanziName){
		res[i] = {"chaifen":null, "xingjin":null, "tongyin":null};
		if(variant.tongyin){
			var pykey = (variant.tongyin[hanziName[i]])[0];
			hanziIds = hanziIds.concat(variant.tongyin.pinyin[pykey]);
		}
		if(variant.xingjin){
			var xingjinIds = variant.xingjin[[hanziName[i]]].xingjinId;
			hanziIds = hanziIds.concat(xingjinIds);
		}
	}
	hanziIds = unique(hanziIds);
	var nameCondition = {
		"table": "hanzi_list",
		"fields": ["id","name"],
		"conditions": {
			"id": hanziIds, 
		}
	}; 
	var sqlite = sqliteTemplate.langTemplate('hanzi.db');
	sqlite.linkDb();
	var idByName = {};
	sqlite.findAll(nameCondition, function(err, row){
		for(var i in row){
			idByName[row[i].id] = row[i].name;
		}
		if(variant.chaifen){
			for(var i in hanziName){
				res[i].chaifen = (variant.chaifen)[hanziName[i]];
			}
		}
		if(variant.tongyin){
			for(var i in hanziName){
				var temp = [];
				var pykey = (variant.tongyin[hanziName[i]])[0];
				var group = variant.tongyin.pinyin[pykey];
				for (var j = group.length - 1; j >= 0; j--) {
					temp.push(idByName[group[j]]);
				};
				res[i].tongyin = temp;
			}
		}
		if(variant.xingjin){
			for(var i in hanziName){
				var temp = [];
				var xingjinIds = variant.xingjin[[hanziName[i]]].xingjinId;
				for (var j = xingjinIds.length - 1; j >= 0; j--) {
					temp.push(idByName[xingjinIds[j]]);
				};
				res[i].xingjin = temp;
			}
		}
		that.emit("format", res)	
	});
	sqlite.closeDb();
	// console.log("format", formatDate);
}
function unique(arr) {
  var ret = []
  for (var i = 0; i < arr.length; i++) {
    var item = arr[i]
    if (ret.indexOf(item) === -1) {
      ret.push(item)
    }
  }
  return ret
}
function findXingjin(sqlite, hanziIds, variant, that){
	var xingjinCondition ={
			"table": "hanzi_similar_category",
			"fields": ["id", "category"],
			"conditions": {
				"id": hanziIds
			}
	};
	sqlite.findAll(xingjinCondition, function(err,row){
		var xingjinObj = new Object();
		var con = new Array();
		for(var i in row){
			variant[row[i].id] = {"category":row[i].category,"xingjinId":[]};
			con.push(row[i].category);
		}
		xingjinCondition.conditions = {"category": con};
		
		sqlite.findEach(xingjinCondition, function(err_l,row_l){
			// console.log("same category", row_l);
			for(var i in variant){
				if(variant[i].category == row_l.category){
					variant[i].xingjinId.push((row_l.id).toString());
				}
			}
		},function(){
			that.dataStatus['xingjin'] = true;
			that.emit('dataStatus', that.dataStatus);
		})
		// console.log("xingjin", variant);
	})
}
function findTongyin(sqlite, hanziIds, variant, that){
	var pinyinCondition = {
			"table": "hanzi_pinyin",
			"fields": ["id","pinyin"],
			"conditions": {
				"id": hanziIds, 
			}
	}; 
	var pinyinListCon = {
		"table": "pinyin_list",
		"fields": ["pinyin","hanzi_id"],
	}; 
	sqlite.findAll(pinyinCondition, function(err, row){
		console.log("pinyin", row);
		// TODO: use all pinyin of one hanzi 
		var pinyin_list = "";
		for(var i in row){
			variant[row[i].id] = row[i].pinyin.split(" ");
			pinyin_list = pinyin_list + " " + row[i].pinyin;
		}
		var pinyin_arr = pinyin_list.split(" ");
		pinyin_arr.shift();
		console.log("pinyin_arr", pinyin_arr);
		pinyinListCon.conditions = {"pinyin": pinyin_arr};
		sqlite.findAll(pinyinListCon, function(err_l, row_l){
			// console.log("pinyin-id", row_l);
			var tempPinyin = {};
			for(var i in row_l){
				var ids =(row_l[i].hanzi_id).split(" ");
				ids.splice(0,1);
				tempPinyin[row_l[i].pinyin] = ids
			}
			variant["pinyin"] = tempPinyin;
			// console.log("tongyin", variant);
			that.dataStatus['tongyin'] = true;
			that.emit('dataStatus', that.dataStatus);
		})
	});
}
function findChaifen(sqlite, hanziIds, variant, that){
	var chaifenCondition = {
		"table": "hanzi_division",
		"fields": ["id","division"],
		"conditions": {
			"id": hanziIds, 
		}
	}; 
	sqlite.findAll(chaifenCondition, function(err, row){
		// console.log("chaifanzi", row);
		for (var i in row) {
			variant[row[i].id] = row[i].division;
		};
		that.dataStatus['chaifen'] = true;
		that.emit('dataStatus', that.dataStatus);
	});
}
exports.SearchBox = SearchBox; 
