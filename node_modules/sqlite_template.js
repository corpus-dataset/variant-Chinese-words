
function langFilter(str){
	return /[><]/.test(str);
}
var sqlite3 = require('sqlite3').verbose();
var langTemplate = function(databasePath) {
  	var db;
  	var varToValue = function(key, value){
  		var conField = key;
  		if(!langFilter(conField)){
			if(Array.isArray(value)){
				conField = conField + " in (" + value.join(",") + ")";
			}else{
				conField = conField + "= '" + value + "'" ;
			}
		}
		return conField; 
  	};
	var orSql = function(objOr){
		var orPArt = "(";
		for(var key in objOr){
			if(key == "OR"){
				orSql(objOr.key);
			}else{
				orPArt = orPArt + varToValue(key, objOr[key]) + " OR ";
			}
		}
		return orPArt + "0)";
	};
	var connectLang = function(conditions){
		var lang = "";
		for(var key in conditions){
			if(key == "OR"){
				lang += orSql(conditions[key]) + " AND ";
			}else{
				console.log(conditions[key]);
				lang += varToValue(key, conditions[key]) + " AND ";
			}
		}
		return lang + "1"
	};
	var preSql = function(con){
		var tableName = con.table;	// "tableName"
		var fieldName = con.fields.join(',');	
		var sqlang = "SELECT " + fieldName + " FROM " + tableName + " WHERE 1 AND ";
		return sqlang + connectLang(con.conditions);
	};

	return {
		setDb: function(newPath){
			databasePath = newPath
		},
		linkDb: function(){
			db = new sqlite3.Database(databasePath);
		},
		closeDb: function(){
			db.close();
		},
		findAll: function(con, fun){
			var sqlang = preSql(con);
			console.log(sqlang);
			db.all(sqlang, fun);
		},
		findOne: function(con, fun){
			var sqlang = preSql(con);
			console.log(sqlang);
			db.get(sqlang, fun);
		}
	}
}
exports.langTemplate = langTemplate;
