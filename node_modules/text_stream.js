var events = require('events');
var fs = require('fs');
var path = require('path');
var util = require('util');
var wordM = require('match_word');

function TextStream(jquery_element) {
  events.EventEmitter.call(this);
  this.element = jquery_element;
  this.textPath = [''];
  var self = this;
  this.element.on('change', function(){
  	self.textPath = self.element.val().split(';');
  	console.log('path', self.textPath);
  })
}
util.inherits(TextStream, events.EventEmitter);

TextStream.prototype.findVariant = function(originInput, formatData){
	var that = this;
	var matchM = wordM.matchM(originInput, formatData);
	var src = that.textPath;
	if(src[0] == ''){
		return false;
	}
	var fileData = {};
	var rs = fs.createReadStream(src[0], {encoding: 'utf-8', bufferSize: 11});
	rs.on('data', function (chunk) {
		rs.pause();
		var textIndex = matchM.searchM(chunk);
		console.log('text index', textIndex);
		// console.log("chunk", chunk);
		// console.log("rs", this.path);
		if(textIndex >= 0){
			var filePath = path.basename(this.path)
			fileData[filePath].push(chunk.substr(textIndex, 4));
		}
		rs.resume();
	});
	rs.on('end', function () {
		var selfPath = this.path;
		that.emit('stream', selfPath, fileData);
	});
	for (var i = src.length - 1; i > 0; i--) {
		var basePath = path.basename(src[i]);
		rs = fs.createReadStream(src[i], {encoding: 'utf-8', bufferSize: 11});
		fileData[basePath] = [];
	};
}
exports.TextStream = TextStream; 